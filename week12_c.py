# -*- coding: utf-8 -*-
"""week12_c.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ERyFoRU9qfNaD_-tLfQHi_5TvotZ_3S

###Implementation of VotingClassifier
"""

from sklearn.datasets import load_breast_cancer
dataset=load_breast_cancer()
x=dataset.data
y=dataset.target

from sklearn.ensemble import GradientBoostingClassifier
a=boost_class=GradientBoostingClassifier(n_estimators=10,random_state=3)

from sklearn.ensemble import BaggingClassifier
from sklearn.neighbors import KNeighborsClassifier
b=bagging=BaggingClassifier(KNeighborsClassifier(),n_estimators=10)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=3)

from sklearn.ensemble import VotingClassifier
from sklearn.metrics import accuracy_score

hard_v=VotingClassifier([('GBT',a),('BC',b)],voting='hard')
soft_v=VotingClassifier([('GBT',a),('BC',b)],voting='soft')

soft_v.fit(x_train,y_train)
soft_v.score(x_test,y_test)

hard_v.fit(x_test,y_test)
hard_v.score(x_test,y_test)

"""###Implementation of Stacking
##FLOP
"""

from pandas.core.common import random_state
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import StackingClassifier
from sklearn.metrics import balanced_accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score
from sklearn.svm import SVC
from sklearn.datasets import load_breast_cancer
dataset=load_breast_cancer()
x=dataset.data
y=dataset.target
cls1= DecisionTreeClassifier(random_state=0)
cls2=KNeighborsClassifier(n_jobs=-1)
cls3=SVC(random_state=3)

classifier=[('DTC',cls1),('KNC',cls2),('SVM',cls3)]

meta_classifier=StackingClassifier([('RFC',RandomForestClassifier),('GBC',GradientBoostingClassifier),('SVM',SVC)])

scls=StackingClassifier(classifier,meta_classifier,)

scls.fit(x_train,y_train)

scls_pred=scls.predict(x_test)

avg_fmeasure=f1_score(scls_pred,y_test,average="weight")
avg_accuracy=balanced_accuracy_score(scls_pred,y_test)

