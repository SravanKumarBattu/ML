# -*- coding: utf-8 -*-
"""week5_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UtOTWqFY8ridoy7Eh3NRMYs842dpBu2X

###Liner regression to predict housing prices in boston
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

#loading pre-defined boston dataset
boston_dataset=datasets.load_boston()

boston_dataset

#load the dataset
boston_pd=pd.DataFrame(boston_dataset.data)

boston_pd.columns=boston_dataset.feature_names

boston_pd_target=np.asarray(boston_dataset.target)

boston_pd['House Price']=pd.Series(boston_pd_target)

#input
X=boston_pd.iloc[:,:-1]

#output
Y=boston_pd.iloc[:,-1]

print(boston_pd)

X

Y

#Split the data into training and testing
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25)

print("Train data shape of X = %s and y=%s :"%(x_train.shape,y_train.shape))
print("Test data shape of X = %s and y=%s :"%(x_test.shape,y_test.shape))

x_train

#Apply the multiple linear regression model
lreg=LinearRegression()
lreg.fit(x_train,y_train)

#Generate prediction on test set
lreg_y_pred=lreg.predict(x_test)

#calculating mean squared error
mean_squared_error=np.mean((lreg_y_pred-y_test)**2)
print("Mean squared Error on test set :",mean_squared_error)

#putting together the coefficent and their corresponding variable names
lreg_coefficient=pd.DataFrame()
lreg_coefficient["Columns"]=x_train.columns
lreg_coefficient['Coefficent Estimate']=pd.Series(lreg.coef_)
print(lreg_coefficient)

#plotting the coeffcient score
fig,ax=plt.subplots(figsize=(20,10))
color=['tab:gray','tab:blue','tab:orange','tab:green','tab:red','tab:purple','tab:brown','tab:pink','tab:gray','tab:olive','tab:cyan','tab:orange','tab:green','tab:blue','tab:olive']
ax.bar(lreg_coefficient["Columns"],
lreg_coefficient['Coefficent Estimate'], 
    color=color )
ax.spines['bottom'].set_position('zero')
plt.style.use('ggplot')
plt.show()

#import ridge regression from sklearn library
from sklearn.linear_model import Ridge

#Train the model
ridgeR=Ridge(alpha=1)
ridgeR.fit(x_train,y_train)
y_pred=ridgeR.predict(x_test)

#calculate mean square error
mean_squared_error_ridge=np.mean((y_pred-y_test)**2)
print("Mean squred error on test set",mean_squared_error_ridge)

#get ridge coefficient and print them
ridge_coefficent=pd.DataFrame()
ridge_coefficent["columns"]=x_train.columns
ridge_coefficent['Coefficent Estimate']=pd.Series(ridgeR.coef_)
print(ridge_coefficent)

#import ridge regression from sklearn library
from sklearn.linear_model import Lasso

#Train the model
lasso=Lasso(alpha=1)
lasso.fit(x_train,y_train)
y_pred1=lasso.predict(x_test)

#calculate mean square error
mean_squared_error=np.mean((y_pred1-y_test)**2)
print("Mean squred error on test set",mean_squared_error)

#get ridge coefficient and print them
lasso_coeff=pd.DataFrame()
lasso_coeff["columns"]=x_train.columns
lasso_coeff['Coefficent Estimate']=pd.Series(lasso.coef_)
print(lasso_coeff)

