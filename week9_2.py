# -*- coding: utf-8 -*-
"""week9_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G7TAp31Z4m7DDTUK2jLCIZEQdHHyKcfv

###Implementation of SVM with different Kernels
###1.Linear Kernel
"""

#importing libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm,datasets

#import some data to deal with
iris=datasets.load_iris()
x=iris.data[:,:2]
y=iris.target

print(x,y)

#we create an instance of svm and fit out data
C=1.0
svc=svm.SVC(kernel='linear',C=1,gamma='auto').fit(x,y)

#create a mesh to plot in
x_min,x_max = x[:,0].min()-1,x[:,0].max()+1
y_min,y_max = x[:,1].min()-1,x[:,1].max()+1
h=(x_max/x_min)/100
xx,yy = np.meshgrid(np.arange(x_min,x_max,h),np.arange(y_min,y_max,h))

print(xx,yy)

plt.subplot(1,1,1)
z= svc.predict(np.c_[xx.ravel(),yy.ravel()])
z=z.reshape(xx.shape)
plt.contourf(xx,yy,z,cmap=plt.cm.Paired,alpha=0.8)

plt.scatter(x[:,0], x[:,1], c=y, cmap=plt.cm.Paired)
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.xlim(xx.min(),xx.max())
plt.title('SVC with linear kernel')
plt.show()

C=90.0
svc=svm.SVC(kernel='linear',C=10,gamma='auto').fit(x,y)
svc.score(x,y)

"""###2.Sigmoid Kernel"""

from sklearn.svm import SVC
svclassifier = SVC(kernel='Sigmoid')
svclassifier.fit()